SoccerNet is a dataset and benchmark of video analytics and featuer inference on soccer videos

There are two benchmarks included here:
- Video analytics task for training dataset
- Feature inference task on inference dataset


To obtain the dataset please click the following link and fill NDA form for access.
https://docs.google.com/forms/d/e/1FAIpQLSfYFqjZNm4IgwGnyJXDPk2Ko_lZcbVtYX73w5lf6din5nxfmA/viewform

Next you need to install SoccerNet via pip in your own directory:
> cd /toplevel/directory/of/test
> git clone https://github.com/SilvioGiancola/SoccerNetv2-DevKit.git

#the following are up to you what you have:
module load dl
module load intelpython3

export INSTALL_PATH=/path/to/soccernet/installation/target
pip install  --prefix=${SOCCERNET_INSTALL_DIR} SoccerNet==0.1.8 opencv-python==3.4.11.45 imutils moviepy

Runtime software requirement:
- 


Download dataset
================ 
Assuming you have signed off NDA for the Dataset and received a password, you can do the following in an interactive Python session

export DATA_DIR=/path/to/save/datasets
> python

import SoccerNet,os
from SoccerNet.Downloader import SoccerNetDownloader

mySoccerNetDownloader = SoccerNetDownloader(LocalDirectory=os.path.join(os.getenv('DATA_DIR'),"SoccerNet"))

# download labels SN v2
mySoccerNetDownloader.downloadGames(files=["Labels-v2.json"], split=["train","valid","test"])
# download labels for camera shot
mySoccerNetDownloader.downloadGames(files=["Labels-cameras.json"], split=["train","valid","test"]) 

# download Features reduced with PCA
mySoccerNetDownloader.downloadGames(files=["1_ResNET_TF2_PCA512.npy", "2_ResNET_TF2_PCA512.npy"], split=["train","valid","test","challenge"])


# FOR Inference dataset
mySoccerNetDownloader = SoccerNetDownloader(LocalDirectory=os.path.join(os.getenv('DATA_DIR'),"feature_extract"))

# The following will ask for your password (should have been notified in your email after submitting the NDA)
mySoccerNetDownloader.password = input("Password for videos?:\n")

# download LQ Videos
mySoccerNetDownloader.downloadGames(files=["1.mkv", "2.mkv"], split=["train","valid","test","challenge"])


How to run:
===========
Upon untaring you will have the following directory/file tree:
.
├── inference
│   ├── jobscript.slurm
│   ├── tools
│   │   ├── dcgm
│   │   │   └── SN_feat
│   │   │       └── 15198920
│   │   │           └── dcgm-gpu-stats-gpu609-05-15198920.out
│   │   ├── ExtractFeatures.py
│   │   └── ExtractFeatures.sh
│   └── workload.sh
├── README
└── training
    ├── jobscript_TF2noPCA.slurm
    ├── LICENSE
    ├── report.py
    └── src
        ├── config
        │   ├── classes.py
        │   └── __pycache__
        │       └── classes.cpython-37.pyc
        ├── dataset.py
        ├── loss.py
        ├── main.py
        ├── metrics_fast.py
        ├── metrics.py
        ├── metrics_visibility_corrected.py
        ├── metrics_visibility_fast.py
        ├── metrics_visibility.py
        ├── model.py
        ├── preprocessing.py
        ├── __pycache__
        │   ├── dataset.cpython-37.pyc
        │   ├── loss.cpython-37.pyc
        │   ├── metrics_fast.cpython-37.pyc
        │   ├── metrics_visibility_fast.cpython-37.pyc
        │   ├── model.cpython-37.pyc
        │   ├── preprocessing.cpython-37.pyc
        │   └── train.cpython-37.pyc
        └── train.py

 NOTE: Both Training and Inference benchmarks are single node. 

Training benchmark
=================
Change directory to "training"
1. It is assumed here that you have installed SoccerNet and have downloaded the data.
2. Set the paths to software and data:
   > export DATA_DIR=/path/to/datasets
   > export SOCCERNET_INSTALL_DIR=/path/to/SoccerNet/installation
3. If using SLURM, you can submit the job to run the training benchmark which trains the model for 10 Epochs.
   sbatch jobscript_TF2noPCA.slurm 
4. At the end of the run you can generate a report running the provided python script "report.py" on the ouptut file  (slurm-*.out in case of SLURM)
   > python3 report.py --file slurm-*.out
   This prints out the metrics those are to be inserted in the benchmark evaluation sheet.

Inference benchmark
===================
Change directory to "inference"
1. It is assumed here that you have installed SoccerNet and have downloaded the data.
2. Set the paths to software and data:
   > export DATA_DIR=/path/to/datasets
   > export SOCCERNET_INSTALL_DIR=/path/to/SoccerNet/installation
3. The inference benchmark runs multiple 1 GPU jobs on a single node concurrently. The provided SLURM jobscript does so on 4 GPUs. 
   Submit job to a node with 4 GPUs and at least 16 cores. The run will generate an output file SN_feat-*.out and a log_*.txt for each GPU.
   The log_*.txt has standard output of Tensorflow and the SN_feat*.out has timing information at the end of a run.

4. For generating a report please run the following (requires Python3 and NumPy support)
   > pythone tools/report.py --file SN_feat-######.out
   The above should provide the Min, Max and Std Dev metrics which need to be inserted to the benchmark evaluation sheet.
   
  *** NOTE: Please run 3 independent trials  and submit the results in the benchmark evaluation sheet for each trial. ***


   
